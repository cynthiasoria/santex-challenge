{"version":3,"sources":["components/Header.tsx","graphql/queries.ts","components/ProductList.styled.ts","components/ProductList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","style","background","src","alt","GET_PRODUCTS","gql","SXGrid","styled","Box","display","gridTemplateColumns","gap","padding","ProductList","useQuery","loading","error","data","message","products","items","map","item","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","commerceLink","createHttpLink","uri","headers","authorization","localStorage","getItem","afterwareLink","ApolloLink","operation","forward","response","authHeader","getContext","get","setItem","client","ApolloClient","cache","InMemoryCache","link","from","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"qOAAO,SAASA,IACd,OACE,yBAAQC,MAAO,CAAEC,WAAY,OAA7B,UACE,qBACEC,IAAI,4EACJC,IAAI,SAEN,yC,+BCLOC,EAAeC,YAAH,oS,iBCCZC,EAASC,YAAOC,IAAPD,CAAY,CAChCE,QAAS,OACTC,oBAAqB,wCACrBC,IAAK,OACLC,QAAS,SCHJ,SAASC,IAAe,IAAD,EACKC,YAASV,GAAlCW,EADoB,EACpBA,QAASC,EADW,EACXA,MAAOC,EADI,EACJA,KACxB,OAAIF,EAAgB,2CAChBC,EAAc,wCAAWA,EAAME,WAEjC,cAACZ,EAAD,UACGW,EAAKE,SAASC,MAAMC,KAAI,SAACC,GAAD,OACvB,8BAAsBA,EAAKC,MAAjBD,EAAKC,WCGRC,MAXf,WACE,OACE,qCACE,cAACzB,EAAD,IACA,8BACE,cAACc,EAAD,UCMOY,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCIRQ,EAAeC,YAAe,CAClCC,IAAK,4CACLC,QAAS,CACPC,cAAeC,aAAaC,QAAQ,cAArB,iBACDD,aAAaC,QAAQ,eAC/B,MAIFC,EAAgB,IAAIC,cAAW,SAACC,EAAWC,GAC/C,OAAOA,EAAQD,GAAWtB,KAAI,SAACwB,GAC7B,IACMC,EADUH,EAAUI,aACCF,SAASR,QAAQW,IAAI,sBAKhD,OAHIF,GACFP,aAAaU,QAAQ,aAAcH,GAE9BD,QAILK,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAMZ,aAAWa,KAAK,CAACd,EAAeP,MAGxCsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAgBT,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SAM1BpC,M","file":"static/js/main.200c5e14.chunk.js","sourcesContent":["export function Header() {\n  return (\n    <header style={{ background: 'red' }}>\n      <img\n        src=\"https://santex.wpengine.com/wp-content/uploads/2019/02/logo-santex@3x.png\"\n        alt=\"logo\"\n      />\n      <div>$ 0</div>\n    </header>\n  );\n}\n","import { gql } from '@apollo/client';\n\nexport const GET_PRODUCTS = gql`\n  query GetProducts {\n    products(options: { take: 10 }) {\n      items {\n        id\n        name\n        description\n        featuredAsset {\n          preview\n        }\n        variants {\n          name\n          price\n        }\n      }\n    }\n  }\n`;\n","import { Box } from '@mui/material';\nimport styled from 'styled-components';\n\nexport const SXGrid = styled(Box)({\n  display: 'grid',\n  gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n  gap: '20px',\n  padding: '20px',\n});\n","import { useQuery } from '@apollo/client';\nimport { GET_PRODUCTS } from '../graphql/queries';\nimport { SXGrid } from './ProductList.styled';\n\nexport function ProductList() {\n  const { loading, error, data } = useQuery(GET_PRODUCTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  return (\n    <SXGrid>\n      {data.products.items.map((item: { name: string }) => (\n        <div key={item.name}>{item.name}</div>\n      ))}\n    </SXGrid>\n  );\n}\n","import { Header } from './components/Header';\nimport { ProductList } from './components/ProductList';\n\nfunction App() {\n  return (\n    <>\n      <Header></Header>\n      <div>\n        <ProductList></ProductList>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  ApolloClient,\n  ApolloLink,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst commerceLink = createHttpLink({\n  uri: 'https://demo.vendure.io/shop-api/shop-api',\n  headers: {\n    authorization: localStorage.getItem('Auth-Token')\n      ? `Bearer ${localStorage.getItem('Auth-Token')}`\n      : '',\n  },\n});\n\nconst afterwareLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map((response) => {\n    const context = operation.getContext();\n    const authHeader = context.response.headers.get('Vendure-Auth-Token');\n\n    if (authHeader) {\n      localStorage.setItem('Auth-Token', authHeader);\n    }\n    return response;\n  });\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([afterwareLink, commerceLink]),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}